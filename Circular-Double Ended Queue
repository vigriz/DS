#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 10

struct Queue {
    int *array;
    int front, rear, size;
};

// Function to create a new Queue
struct Queue* createQueue() {
    struct Queue *queue = (struct Queue*)malloc(sizeof(struct Queue));
    if (queue == NULL) {
        printf("Memory allocation failed\n");
        exit(1);
    }
    queue->array = (int*)malloc(MAX_SIZE * sizeof(int));
    if (queue->array == NULL) {
        printf("Memory allocation failed\n");
        exit(1);
    }
    queue->front = queue->rear = -1;
    queue->size = MAX_SIZE;
    return queue;
}

// Function to check if the queue is full
int isFull(struct Queue *queue) {
    return ((queue->rear + 1) % queue->size == queue->front);
}

// Function to check if the queue is empty
int isEmpty(struct Queue *queue) {
    return (queue->front == -1);
}

// Function to enqueue an element into Circular Queue
void enqueueCircular(struct Queue *queue, int item) {
    if (isFull(queue)) {
        printf("Queue is full. Enqueue operation failed.\n");
        return;
    }
    if (queue->front == -1) {
        queue->front = 0;
    }
    queue->rear = (queue->rear + 1) % queue->size;
    queue->array[queue->rear] = item;
    printf("%d enqueued to Circular Queue\n", item);
}

// Function to dequeue an element from Circular Queue
int dequeueCircular(struct Queue *queue) {
    if (isEmpty(queue)) {
        printf("Queue is empty. Dequeue operation failed.\n");
        exit(1);
    }
    int item = queue->array[queue->front];
    if (queue->front == queue->rear) {
        queue->front = queue->rear = -1;
    } else {
        queue->front = (queue->front + 1) % queue->size;
    }
    return item;
}

// Function to display Circular Queue
void displayCircular(struct Queue *queue) {
    if (isEmpty(queue)) {
        printf("Queue is empty.\n");
        return;
    }
    printf("Circular Queue: ");
    int i = queue->front;
    do {
        printf("%d ", queue->array[i]);
        i = (i + 1) % queue->size;
    } while (i != (queue->rear + 1) % queue->size);
    printf("\n");
}

// Function to enqueue an element into Double-Ended Queue (Deque) from front
void enqueueFrontDeque(struct Queue *queue, int item) {
    if (isFull(queue)) {
        printf("Deque is full. Enqueue operation failed.\n");
        return;
    }
    if (queue->front == -1) {
        queue->front = queue->rear = 0;
    } else if (queue->front == 0) {
        queue->front = queue->size - 1;
    } else {
        queue->front--;
    }
    queue->array[queue->front] = item;
    printf("%d enqueued to Deque from front\n", item);
}

// Function to enqueue an element into Double-Ended Queue (Deque) from rear
void enqueueRearDeque(struct Queue *queue, int item) {
    if (isFull(queue)) {
        printf("Deque is full. Enqueue operation failed.\n");
        return;
    }
    if (queue->front == -1) {
        queue->front = queue->rear = 0;
    } else {
        queue->rear = (queue->rear + 1) % queue->size;
    }
    queue->array[queue->rear] = item;
    printf("%d enqueued to Deque from rear\n", item);
}

// Function to dequeue an element from front of Double-Ended Queue (Deque)
int dequeueFrontDeque(struct Queue *queue) {
    if (isEmpty(queue)) {
        printf("Deque is empty. Dequeue operation failed.\n");
        exit(1);
    }
    int item = queue->array[queue->front];
    if (queue->front == queue->rear) {
        queue->front = queue->rear = -1;
    } else {
        queue->front = (queue->front + 1) % queue->size;
    }
    return item;
}

// Function to dequeue an element from rear of Double-Ended Queue (Deque)
int dequeueRearDeque(struct Queue *queue) {
    if (isEmpty(queue)) {
        printf("Deque is empty. Dequeue operation failed.\n");
        exit(1);
    }
    int item = queue->array[queue->rear];
    if (queue->front == queue->rear) {
        queue->front = queue->rear = -1;
    } else if (queue->rear == 0) {
        queue->rear = queue->size - 1;
    } else {
        queue->rear--;
    }
    return item;
}

// Function to display Double-Ended Queue (Deque)
void displayDeque(struct Queue *queue) {
    if (isEmpty(queue)) {
        printf("Deque is empty.\n");
        return;
    }
    printf("Deque: ");
    int i = queue->front;
    do {
        printf("%d ", queue->array[i]);
        i = (i + 1) % queue->size;
    } while (i != (queue->rear + 1) % queue->size);
    printf("\n");
}

int main() {
    struct Queue *circularQueue = createQueue();
    struct Queue *deque = createQueue();

    int choice, item;

    do {
        printf("\nMenu:");
        printf("\n1. Enqueue to Circular Queue");
        printf("\n2. Dequeue from Circular Queue");
        printf("\n3. Display Circular Queue");
        printf("\n4. Enqueue to Deque from front");
        printf("\n5. Enqueue to Deque from rear");
        printf("\n6. Dequeue from Deque from front");
        printf("\n7. Dequeue from Deque from rear");
        printf("\n8. Display Deque");
        printf("\n9. Exit");
        printf("\nEnter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter item to enqueue to Circular Queue: ");
                scanf("%d", &item);
                enqueueCircular(circularQueue, item);
                break;
            case 2:
                item = dequeueCircular(circularQueue);
                printf("%d dequeued from Circular Queue\n", item);
                break;
            case 3:
                displayCircular(circularQueue);
                break;
            case 4:
                printf("Enter item to enqueue to Deque from front: ");
                scanf("%d", &item);
                enqueueFrontDeque(deque, item);
                break;
            case 5:
                printf("Enter item to enqueue to Deque from rear: ");
                scanf("%d", &item);
                enqueueRearDeque(deque, item);
                break;
            case 6:
                item = dequeueFrontDeque(deque);
                printf("%d dequeued from Deque from front\n", item);
                break;
            case 7:
                item = dequeueRearDeque(deque);
                printf("%d dequeued from Deque from rear\n", item);
                break;
            case 8:
                displayDeque(deque);
                break;
            case 9:
                printf("Exiting program...\n");
                break;
            default:
                printf("Invalid choice! Please enter a valid option.\n");
        }
    } while (choice != 9);

    // Free allocated memory
    free(circularQueue->array);
    free(circularQueue);
    free(deque->array);
    free(deque);

    return 0;
}
