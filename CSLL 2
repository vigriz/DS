#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *next;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed\n");
        exit(1);
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to insert a node at the front
void insertFront(struct Node *head, int key) {
    struct Node *newNode = createNode(key);
    newNode->next = head->next;
    head->next = newNode;
}

// Function to insert a node at the rear
void insertRear(struct Node *head, int key) {
    struct Node *newNode = createNode(key);
    struct Node *temp = head->next;
    if (temp == NULL) {
        head->next = newNode;
        newNode->next = newNode;
    } else {
        while (temp->next != head->next) {
            temp = temp->next;
        }
        temp->next = newNode;
        newNode->next = head->next;
    }
}

// Function to delete a node with the given key
void deleteByKey(struct Node *head, int key) {
    if (head->next == NULL) {
        printf("List is empty. Nothing to delete.\n");
        return;
    }
    struct Node *temp = head->next, *prev = NULL;
    if (temp->data == key) {
        head->next = temp->next;
        free(temp);
        return;
    }
    while (temp->next != head->next && temp->data != key) {
        prev = temp;
        temp = temp->next;
    }
    if (temp->data == key) {
        prev->next = temp->next;
        free(temp);
    } else {
        printf("Key not found.\n");
    }
}

// Function to search for an item by position
void searchByPosition(struct Node *head, int position) {
    if (head->next == NULL) {
        printf("List is empty.\n");
        return;
    }
    struct Node *temp = head->next;
    int count = 0;
    while (temp->next != head->next && count < position) {
        temp = temp->next;
        count++;
    }
    if (count == position) {
        printf("Item at position %d is: %d\n", position, temp->data);
    } else {
        printf("Invalid position.\n");
    }
}

// Function to display the contents of the list
void displayList(struct Node *head) {
    if (head->next == NULL) {
        printf("List is empty.\n");
        return;
    }
    struct Node *temp = head->next;
    printf("List contents: ");
    while (temp->next != head->next) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("%d\n", temp->data);
}

int main() {
    struct Node *head = createNode(-1); // Header node

    int choice, key, position;

    do {
        printf("\nMenu:");
        printf("\n1. Insert at front");
        printf("\n2. Insert at rear");
        printf("\n3. Delete a node with given key");
        printf("\n4. Search for an item by position");
        printf("\n5. Display list contents");
        printf("\n6. Exit");
        printf("\nEnter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter key to insert at front: ");
                scanf("%d", &key);
                insertFront(head, key);
                displayList(head);
                break;
            case 2:
                printf("Enter key to insert at rear: ");
                scanf("%d", &key);
                insertRear(head, key);
                displayList(head);
                break;
            case 3:
                printf("Enter key to delete: ");
                scanf("%d", &key);
                deleteByKey(head, key);
                displayList(head);
                break;
            case 4:
                printf("Enter position to search: ");
                scanf("%d", &position);
                searchByPosition(head, position);
                break;
            case 5:
                displayList(head);
                break;
            case 6:
                printf("Exiting program...\n");
                break;
            default:
                printf("Invalid choice! Please enter a valid option.\n");
        }
    } while (choice != 6);

    // Free allocated memory
    struct Node *temp;
    while (head->next != NULL) {
        temp = head->next;
        head->next = temp->next;
        free(temp);
    }
    free(head);

    return 0;
}
