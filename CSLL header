#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *next;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed\n");
        exit(1);
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to insert a node at the front
void insertFront(struct Node **head, int data) {
    struct Node *newNode = createNode(data);
    if (*head == NULL) {
        newNode->next = newNode;  // Circular linkage
        *head = newNode;
    } else {
        newNode->next = (*head)->next;
        (*head)->next = newNode;
    }
}

// Function to insert a node at the rear
void insertRear(struct Node **head, int data) {
    struct Node *newNode = createNode(data);
    if (*head == NULL) {
        newNode->next = newNode;  // Circular linkage
        *head = newNode;
    } else {
        newNode->next = (*head)->next;
        (*head)->next = newNode;
        *head = newNode; // Update head to the newly inserted node
    }
}

// Function to insert a node by position
void insertByPosition(struct Node **head, int position, int data) {
    struct Node *newNode = createNode(data);
    if (position == 0) {
        insertFront(head, data);
        return;
    }
    struct Node *temp = *head;
    for (int i = 0; i < position - 1 && temp->next != *head; i++) {
        temp = temp->next;
    }
    newNode->next = temp->next;
    temp->next = newNode;
}

// Function to insert a node by order/key
void insertByOrder(struct Node **head, int data) {
    struct Node *newNode = createNode(data);
    if (*head == NULL || data < (*head)->data) {
        insertFront(head, data);
        return;
    }
    struct Node *temp = (*head)->next;
    while (temp->next != *head && temp->next->data < data) {
        temp = temp->next;
    }
    newNode->next = temp->next;
    temp->next = newNode;
}

// Function to delete the first node
void deleteFront(struct Node **head) {
    if (*head == NULL) {
        printf("List is empty. Nothing to delete.\n");
        return;
    }
    struct Node *temp = (*head)->next;
    if (temp->next == temp) {
        free(temp);
        *head = NULL;
    } else {
        (*head)->next = temp->next;
        free(temp);
    }
}

// Function to delete the last node
void deleteRear(struct Node **head) {
    if (*head == NULL) {
        printf("List is empty. Nothing to delete.\n");
        return;
    }
    struct Node *temp = *head;
    while (temp->next->next != *head) {
        temp = temp->next;
    }
    struct Node *toDelete = temp->next;
    temp->next = (*head)->next;
    free(toDelete);
    *head = temp; // Update head to the node before the deleted one
}

// Function to delete a node by position
void deleteByPosition(struct Node **head, int position) {
    if (*head == NULL) {
        printf("List is empty. Nothing to delete.\n");
        return;
    }
    if (position == 0) {
        deleteFront(head);
        return;
    }
    struct Node *temp = *head;
    for (int i = 0; i < position - 1 && temp->next != *head; i++) {
        temp = temp->next;
    }
    if (temp->next == *head) {
        printf("Invalid position.\n");
        return;
    }
    struct Node *toDelete = temp->next;
    temp->next = temp->next->next;
    free(toDelete);
}

// Function to delete a node by key
void deleteByKey(struct Node **head, int key) {
    if (*head == NULL) {
        printf("List is empty. Nothing to delete.\n");
        return;
    }
    struct Node *temp = *head, *prev = NULL;
    while (temp->next != *head && temp->next->data != key) {
        prev = temp;
        temp = temp->next;
    }
    if (temp->next == *head) {
        printf("Key not found.\n");
        return;
    }
    struct Node *toDelete = temp->next;
    if (temp->next == *head) {
        *head = temp;
    }
    temp->next = temp->next->next;
    free(toDelete);
}

// Function to search for an item by key
void searchByKey(struct Node *head, int key) {
    struct Node *temp = head->next;
    int position = 0;
    while (temp != head && temp->data != key) {
        temp = temp->next;
        position++;
    }
    if (temp == head) {
        printf("Key not found.\n");
    } else {
        printf("Key %d found at position %d.\n", key, position);
    }
}

// Function to search for an item by position
void searchByPosition(struct Node *head, int position) {
    struct Node *temp = head->next;
    int count = 0;
    while (temp != head && count < position) {
        temp = temp->next;
        count++;
    }
    if (count == position) {
        printf("Item at position %d is: %d\n", position, temp->data);
    } else {
        printf("Invalid position.\n");
    }
}

// Function to search for an item by value
void searchByValue(struct Node *head, int key) {
    struct Node *temp = head->next;
    int position = 0;
    while (temp != head && temp->data != key) {
        temp = temp->next;
        position++;
    }
    if (temp == head) {
        printf("Item not found.\n");
    } else {
        printf("Item %d found at position %d.\n", key, position);
    }
}

// Function to display the contents of the list
void displayList(struct Node *head) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }
    struct Node *temp = head->next;
    printf("List contents: ");
    while (temp != head) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

int main() {
    struct Node *head = NULL;

    int choice, key, position;

    do {
        printf("\nMenu:");
        printf("\n1. Insert Front");
        printf("\n2. Insert Rear‚Äù);
                printf("\n3. Insert by Position");
        printf("\n4. Insert by Order/Key");
        printf("\n5. Delete Front");
        printf("\n6. Delete Rear");
        printf("\n7. Delete by Position");
        printf("\n8. Delete by Key");
        printf("\n9. Search for an item by key");
        printf("\n10. Search for an item by position");
        printf("\n11. Search for an item by value");
        printf("\n12. Display List");
        printf("\n13. Exit");
        printf("\nEnter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter data to insert at the front: ");
                scanf("%d", &key);
                insertFront(&head, key);
                break;
            case 2:
                printf("Enter data to insert at the rear: ");
                scanf("%d", &key);
                insertRear(&head, key);
                break;
            case 3:
                printf("Enter position to insert: ");
                scanf("%d", &position);
                printf("Enter data to insert: ");
                scanf("%d", &key);
                insertByPosition(&head, position, key);
                break;
            case 4:
                printf("Enter data to insert by order/key: ");
                scanf("%d", &key);
                insertByOrder(&head, key);
                break;
            case 5:
                deleteFront(&head);
                break;
            case 6:
                deleteRear(&head);
                break;
            case 7:
                printf("Enter position to delete: ");
                scanf("%d", &position);
                deleteByPosition(&head, position);
                break;
            case 8:
                printf("Enter key to delete: ");
                scanf("%d", &key);
                deleteByKey(&head, key);
                break;
            case 9:
                printf("Enter key to search: ");
                scanf("%d", &key);
                searchByKey(head, key);
                break;
            case 10:
                printf("Enter position to search: ");
                scanf("%d", &position);
                searchByPosition(head, position);
                break;
            case 11:
                printf("Enter value to search: ");
                scanf("%d", &key);
                searchByValue(head, key);
                break;
            case 12:
                displayList(head);
                break;
            case 13:
                printf("Exiting the program.\n");
                break;
            default:
                printf("Invalid choice. Please enter a valid option.\n");
        }
    } while (choice != 13);

    return 0;
}
