#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

#define MAX_SIZE 20

char stack[MAX_SIZE];
int top = -1;

void push(char x) {
    if (top == MAX_SIZE - 1) {
        printf("Stack Overflow\n");
        return;
    }
    stack[++top] = x;
}

char pop() {
    if (top == -1) {
        printf("Stack Underflow\n");
        return -1;
    }
    return stack[top--];
}

int isEmpty() {
    return top == -1;
}

char peek() {
    if (top == -1) {
        return -1;
    }
    return stack[top];
}

int priority(char x) {
    if (x == '(')
        return 0;
    else if (x == '+' || x == '-')
        return 1;
    else if (x == '*' || x == '/')
        return 2;
    else
        return -1; // Invalid operator
}

int evaluatePostfix(char *postfix) {
    int i = 0, operand1, operand2;
    while (postfix[i] != '\0') {
        if (isdigit(postfix[i])) {
            push(postfix[i] - '0');
        } else {
            operand2 = pop();
            operand1 = pop();
            switch(postfix[i]) {
                case '+':
                    push(operand1 + operand2);
                    break;
                case '-':
                    push(operand1 - operand2);
                    break;
                case '*':
                    push(operand1 * operand2);
                    break;
                case '/':
                    push(operand1 / operand2);
                    break;
                default:
                    printf("Invalid operator in expression!\n");
                    return -1;
            }
        }
        i++;
    }
    return pop();
}

void infixToPostfix(char *exp, char *postfix) {
    int i = 0, j = 0;
    char x;
    while (exp[i] != '\0') {
        if (isalnum(exp[i])) {
            postfix[j++] = exp[i];
        } else if (exp[i] == '(') {
            push(exp[i]);
        } else if (exp[i] == ')') {
            while ((x = pop()) != '(') {
                postfix[j++] = x;
            }
        } else {
            while (!isEmpty() && priority(peek()) >= priority(exp[i])) {
                postfix[j++] = pop();
            }
            push(exp[i]);
        }
        i++;
    }
    while (!isEmpty()) {
        postfix[j++] = pop();
    }
    postfix[j] = '\0';
}

int main() {
    char exp[20], postfix[20];
    int result;
    printf("Enter infix expression: ");
    scanf("%s", exp);
    infixToPostfix(exp, postfix);
    printf("Postfix expression: %s\n", postfix);
    result = evaluatePostfix(postfix);
    printf("Result: %d\n", result);
    return 0;
}
