#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *next;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed\n");
        exit(1);
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to insert a node by position
void insertByPosition(struct Node *head, int position, int key) {
    struct Node *newNode = createNode(key);
    struct Node *temp = head;
    int count = 0;
    while (temp->next != head && count < position) {
        temp = temp->next;
        count++;
    }
    if (count != position) {
        printf("Invalid position.\n");
        return;
    }
    newNode->next = temp->next;
    temp->next = newNode;
}

// Function to delete the last node
void deleteRear(struct Node *head) {
    if (head->next == head) {
        printf("List is empty. Nothing to delete.\n");
        return;
    }
    struct Node *temp = head;
    while (temp->next->next != head) {
        temp = temp->next;
    }
    struct Node *toDelete = temp->next;
    temp->next = head;
    free(toDelete);
}

// Function to delete the first node
void deleteFront(struct Node *head) {
    if (head->next == head) {
        printf("List is empty. Nothing to delete.\n");
        return;
    }
    struct Node *toDelete = head->next;
    head->next = head->next->next;
    free(toDelete);
}

// Function to search for an item by value
void searchByValue(struct Node *head, int key) {
    if (head->next == head) {
        printf("List is empty.\n");
        return;
    }
    struct Node *temp = head->next;
    int position = 0;
    while (temp != head && temp->data != key) {
        temp = temp->next;
        position++;
    }
    if (temp == head) {
        printf("Item not found.\n");
    } else {
        printf("Item %d found at position %d.\n", key, position);
    }
}

// Function to display the contents of the list
void displayList(struct Node *head) {
    if (head->next == head) {
        printf("List is empty.\n");
        return;
    }
    struct Node *temp = head->next;
    printf("List contents: ");
    while (temp != head) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

int main() {
    struct Node *head = createNode(-1); // Header node
    head->next = head;

    int choice, position, key;

    do {
        printf("\nMenu:");
        printf("\n1. Insert by position");
        printf("\n2. Delete rear");
        printf("\n3. Delete front");
        printf("\n4. Search for an item by value");
        printf("\n5. Display list contents");
        printf("\n6. Exit");
        printf("\nEnter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter position and key to insert: ");
                scanf("%d %d", &position, &key);
                insertByPosition(head, position, key);
                displayList(head);
                break;
            case 2:
                deleteRear(head);
                displayList(head);
                break;
            case 3:
                deleteFront(head);
                displayList(head);
                break;
            case 4:
                printf("Enter value to search: ");
                scanf("%d", &key);
                searchByValue(head, key);
                break;
            case 5:
                displayList(head);
                break;
            case 6:
                printf("Exiting program...\n");
                break;
            default:
                printf("Invalid choice! Please enter a valid option.\n");
        }
    } while (choice != 6);

    // Free allocated memory
    struct Node *temp;
    while (head->next != head) {
        temp = head->next;
        head->next = temp->next;
        free(temp);
    }
    free(head);

    return 0;
}
