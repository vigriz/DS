#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

#define MAX_SIZE 20

char stack[MAX_SIZE];
int top = -1;

void push(char x) {
    if (top == MAX_SIZE - 1) {
        printf("Stack Overflow\n");
        exit(EXIT_FAILURE);
    }
    stack[++top] = x;
}

char pop() {
    if (top == -1) {
        printf("Stack Underflow\n");
        exit(EXIT_FAILURE);
    }
    return stack[top--];
}

int isEmpty() {
    return top == -1;
}

char peek() {
    if (top == -1) {
        return -1;
    }
    return stack[top];
}

int priority(char x) {
    if (x == '(')
        return 0;
    else if (x == '+' || x == '-')
        return 1;
    else if (x == '*' || x == '/')
        return 2;
    else
        return -1; // Invalid operator
}

void reverseString(char *str) {
    int i, j;
    char temp;
    for (i = 0, j = strlen(str) - 1; i < j; i++, j--) {
        temp = str[i];
        str[i] = str[j];
        str[j] = temp;
    }
}

void infixToPrefix(char *exp, char *prefix) {
    int i, j;
    char x;
    reverseString(exp);
    for (i = 0, j = 0; exp[i] != '\0'; i++) {
        if (exp[i] == '(') {
            exp[i] = ')';
            i++;
        } else if (exp[i] == ')') {
            exp[i] = '(';
            i++;
        }
    }

    for (i = 0; exp[i] != '\0'; i++) {
        if (isalnum(exp[i])) {
            prefix[j++] = exp[i];
        } else if (exp[i] == '(') {
            push(exp[i]);
        } else if (exp[i] == ')') {
            while ((x = pop()) != '(') {
                prefix[j++] = x;
            }
        } else {
            while (!isEmpty() && priority(peek()) >= priority(exp[i])) {
                prefix[j++] = pop();
            }
            push(exp[i]);
        }
    }
    while (!isEmpty()) {
        prefix[j++] = pop();
    }
    prefix[j] = '\0';
    reverseString(prefix);
}

int evaluatePrefix(char *prefix) {
    int i, operand1, operand2;
    for (i = strlen(prefix) - 1; i >= 0; i--) {
        if (isdigit(prefix[i])) {
            push(prefix[i] - '0');
        } else {
            operand1 = pop();
            operand2 = pop();
            switch (prefix[i]) {
                case '+':
                    push(operand1 + operand2);
                    break;
                case '-':
                    push(operand1 - operand2);
                    break;
                case '*':
                    push(operand1 * operand2);
                    break;
                case '/':
                    push(operand1 / operand2);
                    break;
                default:
                    printf("Invalid operator in expression!\n");
                    exit(EXIT_FAILURE);
            }
        }
    }
    return pop();
}

int main() {
    char exp[MAX_SIZE], prefix[MAX_SIZE];
    int result;
    
    printf("Enter infix expression: ");
    scanf("%s", exp);
    
    infixToPrefix(exp, prefix);
    printf("Prefix expression: %s\n", prefix);
    
    result = evaluatePrefix(prefix);
    printf("Result: %d\n", result);
    
    return 0;
}
